// Code generated by MockGen. DO NOT EDIT.
// Source: handlers.go

// Package mock_handlers is a generated GoMock package.
package mock_handlers

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	modals "github.com/randnull/service-oriented-designs-Kirill-Goryunov/posts_servise/modals"
)

// MockRepositoryInterface is a mock of RepositoryInterface interface.
type MockRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryInterfaceMockRecorder
}

// MockRepositoryInterfaceMockRecorder is the mock recorder for MockRepositoryInterface.
type MockRepositoryInterfaceMockRecorder struct {
	mock *MockRepositoryInterface
}

// NewMockRepositoryInterface creates a new mock instance.
func NewMockRepositoryInterface(ctrl *gomock.Controller) *MockRepositoryInterface {
	mock := &MockRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepositoryInterface) EXPECT() *MockRepositoryInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockRepositoryInterface) Create(post modals.PostData) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", post)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockRepositoryInterfaceMockRecorder) Create(post interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRepositoryInterface)(nil).Create), post)
}

// Delete mocks base method.
func (m *MockRepositoryInterface) Delete(id string, user_id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id, user_id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockRepositoryInterfaceMockRecorder) Delete(id, user_id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRepositoryInterface)(nil).Delete), id, user_id)
}

// GetAll mocks base method.
func (m *MockRepositoryInterface) GetAll(user_id int) ([]modals.PostDataWithId, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", user_id)
	ret0, _ := ret[0].([]modals.PostDataWithId)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockRepositoryInterfaceMockRecorder) GetAll(user_id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockRepositoryInterface)(nil).GetAll), user_id)
}

// GetById mocks base method.
func (m *MockRepositoryInterface) GetById(id string, user_id int) (*modals.PostDataWithId, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", id, user_id)
	ret0, _ := ret[0].(*modals.PostDataWithId)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockRepositoryInterfaceMockRecorder) GetById(id, user_id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockRepositoryInterface)(nil).GetById), id, user_id)
}

// Update mocks base method.
func (m *MockRepositoryInterface) Update(id string, user_id int, new_title, new_body string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", id, user_id, new_title, new_body)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockRepositoryInterfaceMockRecorder) Update(id, user_id, new_title, new_body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockRepositoryInterface)(nil).Update), id, user_id, new_title, new_body)
}
