# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import posts_pb2 as posts__pb2


class PostsServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreatePost = channel.unary_unary(
                '/posts.PostsService/CreatePost',
                request_serializer=posts__pb2.CreateRequest.SerializeToString,
                response_deserializer=posts__pb2.CreateResponse.FromString,
                )
        self.DeletePost = channel.unary_unary(
                '/posts.PostsService/DeletePost',
                request_serializer=posts__pb2.DeleteRequest.SerializeToString,
                response_deserializer=posts__pb2.Response.FromString,
                )
        self.GetByIdPost = channel.unary_unary(
                '/posts.PostsService/GetByIdPost',
                request_serializer=posts__pb2.GetById.SerializeToString,
                response_deserializer=posts__pb2.Post.FromString,
                )
        self.UpdatePost = channel.unary_unary(
                '/posts.PostsService/UpdatePost',
                request_serializer=posts__pb2.UpdateRequest.SerializeToString,
                response_deserializer=posts__pb2.Response.FromString,
                )
        self.GetAllPost = channel.unary_unary(
                '/posts.PostsService/GetAllPost',
                request_serializer=posts__pb2.GetAllRequest.SerializeToString,
                response_deserializer=posts__pb2.GetAllResponse.FromString,
                )


class PostsServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def CreatePost(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeletePost(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetByIdPost(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdatePost(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAllPost(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_PostsServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreatePost': grpc.unary_unary_rpc_method_handler(
                    servicer.CreatePost,
                    request_deserializer=posts__pb2.CreateRequest.FromString,
                    response_serializer=posts__pb2.CreateResponse.SerializeToString,
            ),
            'DeletePost': grpc.unary_unary_rpc_method_handler(
                    servicer.DeletePost,
                    request_deserializer=posts__pb2.DeleteRequest.FromString,
                    response_serializer=posts__pb2.Response.SerializeToString,
            ),
            'GetByIdPost': grpc.unary_unary_rpc_method_handler(
                    servicer.GetByIdPost,
                    request_deserializer=posts__pb2.GetById.FromString,
                    response_serializer=posts__pb2.Post.SerializeToString,
            ),
            'UpdatePost': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdatePost,
                    request_deserializer=posts__pb2.UpdateRequest.FromString,
                    response_serializer=posts__pb2.Response.SerializeToString,
            ),
            'GetAllPost': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAllPost,
                    request_deserializer=posts__pb2.GetAllRequest.FromString,
                    response_serializer=posts__pb2.GetAllResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'posts.PostsService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class PostsService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def CreatePost(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/posts.PostsService/CreatePost',
            posts__pb2.CreateRequest.SerializeToString,
            posts__pb2.CreateResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeletePost(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/posts.PostsService/DeletePost',
            posts__pb2.DeleteRequest.SerializeToString,
            posts__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetByIdPost(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/posts.PostsService/GetByIdPost',
            posts__pb2.GetById.SerializeToString,
            posts__pb2.Post.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdatePost(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/posts.PostsService/UpdatePost',
            posts__pb2.UpdateRequest.SerializeToString,
            posts__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetAllPost(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/posts.PostsService/GetAllPost',
            posts__pb2.GetAllRequest.SerializeToString,
            posts__pb2.GetAllResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
